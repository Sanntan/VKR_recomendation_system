from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import random
from datetime import datetime, timedelta

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
TEST_EVENTS = [
    {
        'id': 1,
        'title': '–í–æ—Ä–∫—à–æ–ø –ø–æ –ª–∏–¥–µ—Ä—Å—Ç–≤—É',
        'date': (datetime.now() + timedelta(days=5)).strftime('%d %B'),
        'format': '–æ—Ñ–ª–∞–π–Ω (–¶–µ–Ω—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π, –∞—É–¥. 202)',
        'skills': '–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        'registration_link': 'https://example.com/event1'
    },
    {
        'id': 2,
        'title': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ Python',
        'date': (datetime.now() + timedelta(days=3)).strftime('%d %B'),
        'format': '–æ–Ω–ª–∞–π–Ω (Zoom)',
        'skills': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
        'registration_link': 'https://example.com/event2'
    },
    {
        'id': 3,
        'title': '–ö–µ–π—Å-—á–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
        'date': (datetime.now() + timedelta(days=7)).strftime('%d %B'),
        'format': '–≥–∏–±—Ä–∏–¥–Ω—ã–π (–æ—Ñ–ª–∞–π–Ω + —Å—Ç—Ä–∏–º)',
        'skills': '—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ',
        'registration_link': 'https://example.com/event3'
    },
    {
        'id': 4,
        'title': '–õ–µ–∫—Ü–∏—è –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É',
        'date': (datetime.now() + timedelta(days=2)).strftime('%d %B'),
        'format': '–æ—Ñ–ª–∞–π–Ω (–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å, –∞—É–¥. 301)',
        'skills': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
        'registration_link': 'https://example.com/event4'
    }
]


def format_event_card(event: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    return (
        f"üéØ *{event['title']}*\n\n"
        f"üìÖ –î–∞—Ç–∞: {event['date']}\n"
        f"üìç –§–æ—Ä–º–∞—Ç: {event['format']}\n"
        f"üí° –†–∞–∑–≤–∏–≤–∞–µ—Ç: {event['skills']}\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏]({event['registration_link']})"
    )


def get_recommendation_buttons(event_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π."""
    keyboard = [
        [
            InlineKeyboardButton("üëç –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"like_{event_id}"),
            InlineKeyboardButton("üëé –ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"dislike_{event_id}")
        ],
        [
            InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ", callback_data="show_other_events"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    recommended_events = random.sample(TEST_EVENTS, min(3, len(TEST_EVENTS)))

    if not recommended_events:
        await update.callback_query.edit_message_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    event = recommended_events[0]
    context.user_data['current_recommendations'] = recommended_events
    context.user_data['current_recommendation_index'] = 0

    await update.callback_query.edit_message_text(
        format_event_card(event),
        reply_markup=get_recommendation_buttons(event['id']),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

async def handle_recommendation_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç feedback –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º."""
    query = update.callback_query
    await query.answer()

    action, event_id = query.data.split('_')
    event_id = int(event_id)

    if action == 'like':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π feedback
        if 'liked_events' not in context.user_data:
            context.user_data['liked_events'] = []
        context.user_data['liked_events'].append(event_id)
        await query.answer("–°–ø–∞—Å–∏–±–æ! –£—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üëç")

    elif action == 'dislike':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π feedback
        if 'disliked_events' not in context.user_data:
            context.user_data['disliked_events'] = []
        context.user_data['disliked_events'].append(event_id)
        await query.answer("–ü–æ–Ω—è—Ç–Ω–æ, —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üëé")


async def show_next_recommendation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."""
    query = update.callback_query
    await query.answer()

    recommendations = context.user_data.get('current_recommendations', [])
    current_index = context.user_data.get('current_recommendation_index', 0)

    if not recommendations:
        await show_recommendations(update, context)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
    current_index = (current_index + 1) % len(recommendations)
    context.user_data['current_recommendation_index'] = current_index

    event = recommendations[current_index]

    await query.edit_message_text(
        format_event_card(event),
        reply_markup=get_recommendation_buttons(event['id']),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )