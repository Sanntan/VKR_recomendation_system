from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from .recommendations import TEST_EVENTS, format_event_card


async def show_search_filters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_date")],
        [InlineKeyboardButton("üéØ –ü–æ —Ñ–æ—Ä–º–∞—Ç—É", callback_data="filter_format")],
        [InlineKeyboardButton("üí° –ü–æ –Ω–∞–≤—ã–∫–∞–º", callback_data="filter_skills")],
        [InlineKeyboardButton("üîç –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="filter_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üîç *–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ üìÖ *–ü–æ –¥–∞—Ç–µ* - –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ üéØ *–ü–æ —Ñ–æ—Ä–º–∞—Ç—É* - –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω\n"
        "‚Ä¢ üí° *–ü–æ –Ω–∞–≤—ã–∫–∞–º* - —Ä–∞–∑–≤–∏–≤–∞–µ–º—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏\n"
        "‚Ä¢ üîç *–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è* - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    )

    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_search_filter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()

    filter_type = query.data.replace('filter_', '')

    if filter_type == 'all':
        events = TEST_EVENTS
    elif filter_type == 'date':
        events = sorted(TEST_EVENTS, key=lambda x: x['id'])
    elif filter_type == 'format':
        events = [e for e in TEST_EVENTS if '–æ—Ñ–ª–∞–π–Ω' in e['format'].lower()]
    elif filter_type == 'skills':
        events = [e for e in TEST_EVENTS if '–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å' in e['skills'].lower()]
    else:
        events = TEST_EVENTS

    if not events:
        await query.edit_message_text(
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="event_search")]])
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    context.user_data['search_results'] = events
    context.user_data['current_search_index'] = 0

    event = events[0]

    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="search_next")],
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="event_search")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]

    await query.edit_message_text(
        f"üîç *–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}*\n\n" + format_event_card(event),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )


async def show_next_search_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()

    results = context.user_data.get('search_results', [])
    current_index = context.user_data.get('current_search_index', 0)

    if not results:
        await show_search_filters(update, context)
        return

    current_index = (current_index + 1) % len(results)
    context.user_data['current_search_index'] = current_index

    event = results[current_index]

    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="search_next")],
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="event_search")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]

    await query.edit_message_text(
        f"üîç *–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(results)}*\n\n" + format_event_card(event),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown',
        disable_web_page_preview=True
    )