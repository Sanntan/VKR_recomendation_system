import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update, InlineKeyboardMarkup
from src.bot.handlers.recommendations import show_recommendations, handle_recommendation_feedback, \
    show_next_recommendation
from datetime import datetime, timedelta


@pytest.fixture
def mock_update_with_callback():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Update —Å callback_query."""
    update = MagicMock(spec=Update)
    update.callback_query = AsyncMock()
    update.callback_query.edit_message_text = AsyncMock()
    update.callback_query.answer = AsyncMock()
    return update


@pytest.mark.asyncio
async def test_show_recommendations(mock_update_with_callback):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    mock_context = MagicMock()
    mock_context.user_data = {}

    await show_recommendations(mock_update_with_callback, mock_context)

    assert mock_update_with_callback.callback_query.edit_message_text.called

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ user_data
    assert 'current_recommendations' in mock_context.user_data
    assert 'current_recommendation_index' in mock_context.user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    call_args = mock_update_with_callback.callback_query.edit_message_text.call_args
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ call_args[0] (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ) –∏–ª–∏ call_args[1] (–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ)
    if call_args[0]:  # –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        text = call_args[0][0]
    else:  # –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        text = call_args[1].get('text', '')

    assert "üéØ" in text  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è


@pytest.mark.asyncio
async def test_handle_recommendation_feedback_like(mock_update_with_callback):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∞–π–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    mock_context = MagicMock()
    mock_context.user_data = {}

    mock_update_with_callback.callback_query.data = "like_1"

    await handle_recommendation_feedback(mock_update_with_callback, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    mock_update_with_callback.callback_query.answer.assert_called_with("–°–ø–∞—Å–∏–±–æ! –£—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üëç")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–π–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    assert mock_context.user_data['liked_events'] == [1]


@pytest.mark.asyncio
async def test_handle_recommendation_feedback_dislike(mock_update_with_callback):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∑–ª–∞–π–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    mock_context = MagicMock()
    mock_context.user_data = {}

    mock_update_with_callback.callback_query.data = "dislike_1"

    await handle_recommendation_feedback(mock_update_with_callback, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    mock_update_with_callback.callback_query.answer.assert_called_with("–ü–æ–Ω—è—Ç–Ω–æ, —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üëé")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∑–ª–∞–π–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    assert mock_context.user_data['disliked_events'] == [1]


@pytest.mark.asyncio
async def test_show_next_recommendation(mock_update_with_callback):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    mock_context = MagicMock()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
    mock_context.user_data = {
        'current_recommendations': [
            {
                'id': 1,
                'title': 'Event 1',
                'date': (datetime.now() + timedelta(days=5)).strftime('%d %B'),
                'format': '–æ—Ñ–ª–∞–π–Ω (–¶–µ–Ω—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π, –∞—É–¥. 202)',
                'skills': '–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                'registration_link': 'https://example.com/event1'
            },
            {
                'id': 2,
                'title': 'Event 2',
                'date': (datetime.now() + timedelta(days=3)).strftime('%d %B'),
                'format': '–æ–Ω–ª–∞–π–Ω (Zoom)',
                'skills': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
                'registration_link': 'https://example.com/event2'
            }
        ],
        'current_recommendation_index': 0
    }

    await show_next_recommendation(mock_update_with_callback, mock_context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω edit_message_text
    assert mock_update_with_callback.callback_query.edit_message_text.called

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
    assert mock_context.user_data['current_recommendation_index'] == 1